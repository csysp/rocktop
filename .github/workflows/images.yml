name: Images

on:
  pull_request:
  push:
    branches: [ main, master ]

jobs:
  discover:
    name: Discover Dockerfiles
    runs-on: ubuntu-24.04
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      count: ${{ steps.set-matrix.outputs.count }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Find Dockerfiles
        id: set-matrix
        shell: bash
        run: |
          set -euo pipefail
          mapfile -t files < <(git ls-files 'Dockerfile' 'docker/**/Dockerfile*' '**/Dockerfile' || true)
          if [ ${#files[@]} -eq 0 ]; then
            echo "matrix={\"include\":[]}" >> "$GITHUB_OUTPUT"
            echo "count=0" >> "$GITHUB_OUTPUT"
            exit 0
          fi
          echo "Discovered: ${files[*]}"
          printf '{"include":[' > matrix.json
          first=1
          for f in "${files[@]}"; do
            ctx=$(dirname "$f")
            [ "$ctx" = "." ] && ctx="."
            base=$(basename "$f")
            suf=${base#Dockerfile}
            if [ -z "$suf" ]; then suf="base"; else suf=${suf#.}; fi
            [ $first -eq 0 ] && printf ',' >> matrix.json || first=0
            printf '{"context":"%s","file":"%s","image_suffix":"%s"}' "$ctx" "$f" "$suf" >> matrix.json
          done
          printf ']}' >> matrix.json
          echo "matrix=$(cat matrix.json)" >> "$GITHUB_OUTPUT"
          echo "count=${#files[@]}" >> "$GITHUB_OUTPUT"
          cat matrix.json

  build-and-scan:
    name: Build images + SBOM + scan
    runs-on: ubuntu-24.04
    needs: discover
    if: ${{ needs.discover.outputs.count != '0' }}
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}
      cancel-in-progress: true
    permissions:
      contents: read
      packages: write
      id-token: write
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.discover.outputs.matrix) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ghcr.io/${{ github.repository }}
          tags: |
            type=raw,value=${{ matrix.image_suffix }}-sha-${{ github.sha }}
            type=ref,event=branch,prefix=${{ matrix.image_suffix }}-
            type=semver,pattern={{version}},prefix=${{ matrix.image_suffix }}-

      - name: Log in to GHCR
        if: ${{ github.event_name == 'push' }}
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build image (no push on PR)
        uses: docker/build-push-action@v6
        with:
          context: ${{ matrix.context }}
          file: ${{ matrix.file }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          load: true
          push: ${{ github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master') }}

      - name: Pick primary tag
        id: imagename
        shell: bash
        run: |
          first_tag=$(printf "%s\n" "${{ steps.meta.outputs.tags }}" | head -n1)
          echo "tag=$first_tag" >> "$GITHUB_OUTPUT"

      - name: Syft SBOM (image SPDX)
        uses: anchore/sbom-action@v0
        with:
          image: ${{ steps.imagename.outputs.tag }}
          artifact-name: sbom-image-${{ matrix.image_suffix }}.spdx.json
          output-file: sbom-image-${{ matrix.image_suffix }}.spdx.json
          format: spdx-json

      - name: Syft SBOM (image CycloneDX)
        uses: anchore/sbom-action@v0
        with:
          image: ${{ steps.imagename.outputs.tag }}
          artifact-name: sbom-image-${{ matrix.image_suffix }}.cdx.json
          output-file: sbom-image-${{ matrix.image_suffix }}.cdx.json
          format: cyclonedx-json

      - name: Trivy image scan
        uses: aquasecurity/trivy-action@0.20.0
        with:
          scan-type: 'image'
          image-ref: ${{ steps.imagename.outputs.tag }}
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'

      - name: Install Cosign
        if: ${{ github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master') }}
        uses: sigstore/cosign-installer@v3

      - name: Cosign sign (keyless)
        if: ${{ github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master') }}
        env:
          COSIGN_EXPERIMENTAL: "true"
        run: |
          cosign sign --yes ${{ steps.imagename.outputs.tag }}

      - name: Cosign attest (attach SPDX SBOM)
        if: ${{ github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master') }}
        env:
          COSIGN_EXPERIMENTAL: "true"
        run: |
          cosign attest --yes \
            --type spdxjson \
            --predicate sbom-image-${{ matrix.image_suffix }}.spdx.json \
            ${{ steps.imagename.outputs.tag }}

      - name: Cosign attest (attach CycloneDX SBOM)
        if: ${{ github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master') }}
        env:
          COSIGN_EXPERIMENTAL: "true"
        run: |
          cosign attest --yes \
            --type cyclonedx \
            --predicate sbom-image-${{ matrix.image_suffix }}.cdx.json \
            ${{ steps.imagename.outputs.tag }}
